// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation

/// AudioKit version of Apple's BandPassFilter Audio Unit
///
open class BandPassFilter: Node, Toggleable {

    fileprivate let effectAU = AVAudioUnitEffect(
    audioComponentDescription:
    AudioComponentDescription(appleEffect: kAudioUnitSubType_BandPassFilter))

    /// Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)
    @Parameter public var centerFrequency: AUValue

    /// Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)
    @Parameter public var bandwidth: AUValue

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true

    /// Initialize the band pass filter node
    ///
    /// - parameter input: Input node to process
    /// - parameter centerFrequency: Center Frequency (Hz) ranges from 20 to 22050 (Default: 5000)
    /// - parameter bandwidth: Bandwidth (Cents) ranges from 100 to 12000 (Default: 600)
    ///
    public init(
        _ input: Node,
        centerFrequency: AUValue = 5000,
        bandwidth: AUValue = 600) {
        super.init(avAudioNode: effectAU)
        connections.append(input)

        self.$centerFrequency.associate(with: effectAU, index: 0)
        self.$bandwidth.associate(with: effectAU, index: 1)

        self.centerFrequency = centerFrequency
        self.bandwidth = bandwidth
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        effectAU.bypass = false
        isStarted = true
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        effectAU.bypass = true
        isStarted = false
    }
}
