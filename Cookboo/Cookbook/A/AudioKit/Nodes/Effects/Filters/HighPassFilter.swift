// Copyright AudioKit. All Rights Reserved. Revision History at http://github.com/AudioKit/AudioKit/
// This file was auto-autogenerated by scripts and templates at http://github.com/AudioKit/AudioKitDevTools/

import AVFoundation

/// AudioKit version of Apple's HighPassFilter Audio Unit
///
open class HighPassFilter: Node, Toggleable {

    fileprivate let effectAU = AVAudioUnitEffect(
    audioComponentDescription:
    AudioComponentDescription(appleEffect: kAudioUnitSubType_HighPassFilter))

    /// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
    @Parameter public var cutoffFrequency: AUValue

    /// Resonance (dB) ranges from -20 to 40 (Default: 0)
    @Parameter public var resonance: AUValue

    /// Tells whether the node is processing (ie. started, playing, or active)
    public var isStarted = true

    /// Initialize the high pass filter node
    ///
    /// - parameter input: Input node to process
    /// - parameter cutoffFrequency: Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
    /// - parameter resonance: Resonance (dB) ranges from -20 to 40 (Default: 0)
    ///
    public init(
        _ input: Node,
        cutoffFrequency: AUValue = 6900,
        resonance: AUValue = 0) {
        super.init(avAudioNode: effectAU)
        connections.append(input)

        self.$cutoffFrequency.associate(with: effectAU, index: 0)
        self.$resonance.associate(with: effectAU, index: 1)

        self.cutoffFrequency = cutoffFrequency
        self.resonance = resonance
    }

    /// Function to start, play, or activate the node, all do the same thing
    public func start() {
        effectAU.bypass = false
        isStarted = true
    }

    /// Function to stop or bypass the node, both are equivalent
    public func stop() {
        effectAU.bypass = true
        isStarted = false
    }
}
